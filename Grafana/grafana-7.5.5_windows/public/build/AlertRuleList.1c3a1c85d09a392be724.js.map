{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/features/alerting/components/AlertDefinitionItem.tsx","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","config","featureToggles","ngalert","ngAlertDefinitions","setAlertDefinitions","results","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","alertError","error","updateNotificationChannel","put","testNotificationChannel","channel","notificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","getAlertDefinition","alertDefinition","setAlertDefinition","createAlertDefinition","getStore","buildAlertDefinition","updateAlertDefinition","uid","updatedAlertDefinition","updateAlertDefinitionUiState","uiState","nextState","setUiState","store","setObject","ALERT_DEFINITION_UI_STATE_STORAGE_KEY","console","updateAlertDefinitionOption","updateAlertDefinitionOptions","queryOptionsChange","queryOptions","setQueryOptions","onRunQueries","queryRunner","timeRange","from","to","getQueryOptions","run","timezone","dateMath","parse","raw","maxDataPoints","minInterval","queries","datasource","dataSource","evaluateAlertDefinition","response","handledResponse","handleBase64Response","instances","setInstanceData","evaluateNotSavedAlertDefinition","getDataSourceSrv","defaultDataSource","condition","buildDataQueryModel","cleanUpDefinitionState","cleanUpState","undefined","currentAlertDefinition","frames","dataFrames","map","instance","table","base64StringToArrowTable","arrowTableToDataFrame","applyFieldOverrides","fieldConfig","defaults","overrides","replaceVariables","value","theme","isExpression","ExpressionDatasourceID","dataSourceSetting","getInstanceSettings","model","type","queryType","datasourceUid","refId","relativeTimeRange","From","To","AlertDefinitionItem","search","heading","CardTitle","title","Figure","size","className","Meta","key","description","Actions","variant","href","icon","style","display","justifyContent","width","highlightClassName","textToHighlight","searchWords","featureState","FeatureState","beta","mapDispatchToProps","setSearchQuery","connector","connect","navModel","getNavModel","navIndex","alertRules","getAlertRuleItems","getSearchQuery","isLoading","alertDefinitions","AlertRuleListUnconnected","stateFilters","label","onStateFilterChanged","option","props","onOpenHowTo","CoreEvents","showModal","src","modalClass","onSearchQueryChange","onTogglePause","rule","paused","alertStateFilterOption","text","this","fetchRules","prevProps","getStateFilter","Contents","labelClassName","inputClassName","placeholder","onChange","onClick","spacing","index","hasOwnProperty","PureComponent","hot","module","AlertRuleItem","ruleUrl","url","panelId","renderText","useCallback","stateIcon","stateClass","stateText","stateAge","info","searchQuery","regex","RegExp","result","push","items","filter","item","test"],"mappings":"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","file":"AlertRuleList.1c3a1c85d09a392be724.js","sourcesContent":["import {\n  AppEvents,\n  applyFieldOverrides,\n  arrowTableToDataFrame,\n  base64StringToArrowTable,\n  DataSourceApi,\n  dateMath,\n} from '@grafana/data';\nimport { config, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { updateLocation } from 'app/core/actions';\nimport store from 'app/core/store';\nimport {\n  ALERT_DEFINITION_UI_STATE_STORAGE_KEY,\n  cleanUpState,\n  loadAlertRules,\n  loadedAlertRules,\n  notificationChannelLoaded,\n  setAlertDefinition,\n  setAlertDefinitions,\n  setInstanceData,\n  setNotificationChannels,\n  setQueryOptions,\n  setUiState,\n  updateAlertDefinitionOptions,\n} from './reducers';\nimport {\n  AlertDefinition,\n  AlertDefinitionState,\n  AlertDefinitionUiState,\n  AlertRuleDTO,\n  NotifierDTO,\n  QueryGroupDataSource,\n  QueryGroupOptions,\n  ThunkResult,\n} from 'app/types';\nimport { ExpressionDatasourceID } from '../../expressions/ExpressionDatasource';\nimport { ExpressionQuery } from '../../expressions/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n\n    if (config.featureToggles.ngalert) {\n      const ngAlertDefinitions = await getBackendSrv().get('/api/alert-definitions');\n      dispatch(setAlertDefinitions(ngAlertDefinitions.results));\n    }\n\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n\nexport function getAlertDefinition(id: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertDefinition = await getBackendSrv().get(`/api/alert-definitions/${id}`);\n    dispatch(setAlertDefinition(alertDefinition));\n  };\n}\n\nexport function createAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const alertDefinition = await buildAlertDefinition(getStore().alertDefinition);\n\n    await getBackendSrv().post(`/api/alert-definitions`, alertDefinition);\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition created']);\n    dispatch(updateLocation({ path: 'alerting/list' }));\n  };\n}\n\nexport function updateAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const alertDefinition = await buildAlertDefinition(getStore().alertDefinition);\n\n    const updatedAlertDefinition = await getBackendSrv().put(\n      `/api/alert-definitions/${alertDefinition.uid}`,\n      alertDefinition\n    );\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition updated']);\n    dispatch(setAlertDefinition(updatedAlertDefinition));\n  };\n}\n\nexport function updateAlertDefinitionUiState(uiState: Partial<AlertDefinitionUiState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().alertDefinition.uiState, ...uiState };\n    dispatch(setUiState(nextState));\n\n    try {\n      store.setObject(ALERT_DEFINITION_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function updateAlertDefinitionOption(alertDefinition: Partial<AlertDefinition>): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(updateAlertDefinitionOptions(alertDefinition));\n  };\n}\n\nexport function queryOptionsChange(queryOptions: QueryGroupOptions): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(setQueryOptions(queryOptions));\n  };\n}\n\nexport function onRunQueries(): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const { queryRunner, getQueryOptions } = getStore().alertDefinition;\n    const timeRange = { from: 'now-1h', to: 'now' };\n    const queryOptions = getQueryOptions();\n\n    queryRunner!.run({\n      // if the queryRunner is undefined here somethings very wrong so it's ok to throw an unhandled error\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource.name!,\n    });\n  };\n}\n\nexport function evaluateAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { alertDefinition } = getStore().alertDefinition;\n\n    const response: { instances: string[] } = await getBackendSrv().get(\n      `/api/alert-definitions/eval/${alertDefinition.uid}`\n    );\n\n    const handledResponse = handleBase64Response(response.instances);\n\n    dispatch(setInstanceData(handledResponse));\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition tested successfully']);\n  };\n}\n\nexport function evaluateNotSavedAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { alertDefinition, getQueryOptions } = getStore().alertDefinition;\n    const defaultDataSource = await getDataSourceSrv().get(null);\n\n    const response: { instances: string[] } = await getBackendSrv().post('/api/alert-definitions/eval', {\n      condition: alertDefinition.condition,\n      data: buildDataQueryModel(getQueryOptions(), defaultDataSource),\n    });\n\n    const handledResponse = handleBase64Response(response.instances);\n    dispatch(setInstanceData(handledResponse));\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition tested successfully']);\n  };\n}\n\nexport function cleanUpDefinitionState(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(cleanUpState(undefined));\n  };\n}\n\nasync function buildAlertDefinition(state: AlertDefinitionState) {\n  const queryOptions = state.getQueryOptions();\n  const currentAlertDefinition = state.alertDefinition;\n  const defaultDataSource = await getDataSourceSrv().get(null);\n\n  return {\n    ...currentAlertDefinition,\n    data: buildDataQueryModel(queryOptions, defaultDataSource),\n  };\n}\n\nfunction handleBase64Response(frames: string[]) {\n  const dataFrames = frames.map((instance) => {\n    const table = base64StringToArrowTable(instance);\n    return arrowTableToDataFrame(table);\n  });\n\n  return applyFieldOverrides({\n    data: dataFrames,\n    fieldConfig: {\n      defaults: {},\n      overrides: [],\n    },\n    replaceVariables: (value: any) => value,\n    theme: config.theme,\n  });\n}\n\nfunction buildDataQueryModel(queryOptions: QueryGroupOptions, defaultDataSource: DataSourceApi) {\n  return queryOptions.queries.map((query) => {\n    let dataSource: QueryGroupDataSource;\n    const isExpression = query.datasource === ExpressionDatasourceID;\n\n    if (isExpression) {\n      dataSource = { name: ExpressionDatasourceID, uid: ExpressionDatasourceID };\n    } else {\n      const dataSourceSetting = getDataSourceSrv().getInstanceSettings(query.datasource);\n\n      dataSource = {\n        name: dataSourceSetting?.name ?? defaultDataSource.name,\n        uid: dataSourceSetting?.uid ?? defaultDataSource.uid,\n      };\n    }\n\n    return {\n      model: {\n        ...query,\n        type: isExpression ? (query as ExpressionQuery).type : query.queryType,\n        datasource: dataSource.name,\n        datasourceUid: dataSource.uid,\n      },\n      refId: query.refId,\n      relativeTimeRange: {\n        From: 500,\n        To: 0,\n      },\n    };\n  });\n}\n","import React, { FC } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { FeatureState } from '@grafana/data';\nimport { Card, FeatureBadge, Icon, LinkButton } from '@grafana/ui';\nimport { AlertDefinition } from 'app/types';\n\ninterface Props {\n  alertDefinition: AlertDefinition;\n  search: string;\n}\n\nexport const AlertDefinitionItem: FC<Props> = ({ alertDefinition, search }) => {\n  return (\n    <Card heading={CardTitle(alertDefinition.title, search)}>\n      <Card.Figure>\n        <Icon size=\"xl\" name=\"question-circle\" className=\"alert-rule-item__icon\" />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\">{alertDefinition.description}</span>\n        </span>\n      </Card.Meta>\n      <Card.Actions>\n        {[\n          <LinkButton key=\"edit\" variant=\"secondary\" href={`/alerting/${alertDefinition.uid}/edit`} icon=\"cog\">\n            Edit alert\n          </LinkButton>,\n        ]}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst CardTitle = (title: string, search: string) => (\n  <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n    <Highlighter\n      key={title}\n      highlightClassName=\"highlight-search-match\"\n      textToHighlight={title}\n      searchWords={[search]}\n    />\n    <FeatureBadge featureState={FeatureState.beta} />\n  </div>\n);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, ConnectedProps } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { updateLocation } from 'app/core/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertDefinition, AlertRule, CoreEvents, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { setSearchQuery } from './state/reducers';\nimport { Button, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport { AlertDefinitionItem } from './components/AlertDefinitionItem';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    stateFilter: state.location.query.state,\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n    ngAlertDefinitions: state.alertDefinition.alertDefinitions,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateLocation,\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props, any> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No Data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.stateFilter !== this.props.stateFilter) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    const { stateFilter } = this.props;\n    if (stateFilter) {\n      return stateFilter.toString();\n    }\n    return 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    this.props.updateLocation({\n      query: { state: option.value },\n    });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/alerting/partials/alert_howto.html',\n      modalClass: 'confirm-modal',\n      model: {},\n    });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n                inputClassName=\"gf-form-input\"\n                placeholder=\"Search alerts\"\n                value={search}\n                onChange={this.onSearchQueryChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"width-13\">\n                <Select\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.featureToggles.ngalert && (\n              <LinkButton variant=\"primary\" href=\"alerting/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule, index) => {\n              // Alert definition has \"title\" as name property.\n              if (rule.hasOwnProperty('name')) {\n                return (\n                  <AlertRuleItem\n                    rule={rule as AlertRule}\n                    key={rule.id}\n                    search={search}\n                    onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                  />\n                );\n              }\n              return (\n                <AlertDefinitionItem\n                  key={`${rule.id}-${index}`}\n                  alertDefinition={rule as AlertDefinition}\n                  search={search}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default hot(module)(connector(AlertRuleListUnconnected));\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card heading={<a href={ruleUrl}>{renderText(rule.name)}</a>}>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import { AlertDefinition, AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\nimport { config } from '@grafana/runtime';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState) => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n  const result: Array<AlertRule | AlertDefinition> = [];\n\n  result.push(\n    ...state.alertRules.items.filter((item) => {\n      return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n    })\n  );\n\n  if (config.featureToggles.ngalert) {\n    result.push(\n      ...state.alertDefinition.alertDefinitions.filter((item) => {\n        return regex.test(item.title);\n      })\n    );\n  }\n\n  return result;\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n"],"sourceRoot":""}