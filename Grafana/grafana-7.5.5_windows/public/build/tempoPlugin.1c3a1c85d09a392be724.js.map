{"version":3,"sources":["webpack:///./public/app/core/components/TraceToLogsSettings.tsx","webpack:///./public/app/plugins/datasource/tempo/datasource.ts","webpack:///./public/app/plugins/datasource/tempo/QueryField.tsx","webpack:///./public/app/plugins/datasource/tempo/module.ts","webpack:///./public/app/plugins/datasource/tempo/ConfigEditor.tsx"],"names":["TraceToLogsSettings","options","onOptionsChange","styles","useStyles","getStyles","className","infoText","tooltip","pluginId","current","jsonData","tracesToLogs","datasourceUid","noDefault","onChange","ds","updateDatasourcePluginJsonDataOption","uid","tags","theme","css","spacing","md","colors","textSemiWeak","TempoDatasource","instanceSettings","pipe","map","response","error","data","MutableDataFrame","fields","name","type","FieldType","trace","values","JSON","parse","get","meta","preferredVisualisationType","targets","query","refId","toPromise","message","startsWith","status","DataSourceWithBackend","TempoQueryField","this","props","FormField","label","labelWidth","inputEl","aria-label","selectors","components","QueryField","container","style","width","value","e","currentTarget","React","PureComponent","plugin","DataSourcePlugin","setConfigEditor","defaultUrl","dataSourceConfig","showAccessOptions","setExploreQueryField"],"mappings":"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","file":"tempoPlugin.1c3a1c85d09a392be724.js","sourcesContent":["import {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineFormLabel, TagsInput, useStyles } from '@grafana/ui';\nimport { css } from 'emotion';\nimport React from 'react';\nimport { DataSourcePicker } from './Select/DataSourcePicker';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs let&apos;s you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineFormLabel tooltip=\"The data source the trace is going to navigate to\">Data source</InlineFormLabel>\n        <DataSourcePicker\n          pluginId=\"loki\"\n          current={options.jsonData.tracesToLogs?.datasourceUid}\n          noDefault={true}\n          onChange={(ds) =>\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n              datasourceUid: ds.uid,\n              tags: options.jsonData.tracesToLogs?.tags,\n            })\n          }\n        />\n      </div>\n\n      <div className=\"gf-form\">\n        <InlineFormLabel tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\">\n          Tags\n        </InlineFormLabel>\n        <TagsInput\n          tags={options.jsonData.tracesToLogs?.tags}\n          onChange={(tags) =>\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n              datasourceUid: options.jsonData.tracesToLogs?.datasourceUid,\n              tags: tags,\n            })\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","import {\n  DataFrame,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport type TempoQuery = {\n  query: string;\n} & DataQuery;\n\nexport class TempoDatasource extends DataSourceWithBackend<TempoQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    return super.query(options).pipe(\n      map((response) => {\n        if (response.error) {\n          return response;\n        }\n\n        return {\n          data: [\n            new MutableDataFrame({\n              fields: [\n                {\n                  name: 'trace',\n                  type: FieldType.trace,\n                  values: [JSON.parse((response.data as DataFrame[])[0].fields[0].values.get(0))],\n                },\n              ],\n              meta: {\n                preferredVisualisationType: 'trace',\n              },\n            }),\n          ],\n        };\n      })\n    );\n  }\n\n  async testDatasource(): Promise<any> {\n    const response = await super.query({ targets: [{ query: '', refId: 'A' }] } as any).toPromise();\n\n    if (!response.error?.message?.startsWith('failed to get trace')) {\n      return { status: 'error', message: 'Data source is not working' };\n    }\n\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    return query.query;\n  }\n}\n","import { ExploreQueryFieldProps } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { LegacyForms } from '@grafana/ui';\nimport React from 'react';\nimport { TempoDatasource, TempoQuery } from './datasource';\n\ntype Props = ExploreQueryFieldProps<TempoDatasource, TempoQuery>;\nexport class TempoQueryField extends React.PureComponent<Props> {\n  render() {\n    const { query, onChange } = this.props;\n\n    return (\n      <LegacyForms.FormField\n        label=\"Trace ID\"\n        labelWidth={4}\n        inputEl={\n          <div className=\"slate-query-field__wrapper\">\n            <div className=\"slate-query-field\" aria-label={selectors.components.QueryField.container}>\n              <input\n                style={{ width: '100%' }}\n                value={query.query || ''}\n                onChange={(e) =>\n                  onChange({\n                    ...query,\n                    query: e.currentTarget.value,\n                  })\n                }\n              />\n            </div>\n          </div>\n        }\n      />\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TempoDatasource } from './datasource';\nimport { TempoQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(TempoQueryField);\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogsSettings';\nimport React from 'react';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://tempo\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n    </>\n  );\n};\n"],"sourceRoot":""}