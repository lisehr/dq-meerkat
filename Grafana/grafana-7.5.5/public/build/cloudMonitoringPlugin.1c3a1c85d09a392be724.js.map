{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloud-monitoring/api.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/module.ts"],"names":["Api","baseUrl","this","cache","defaultOptions","useCache","responseMap","res","path","options","Promise","resolve","getBackendSrv","fetch","url","method","pipe","map","response","responsePropName","match","split","data","catchError","error","appEvents","emit","CoreEvents","dsRequestError","formatCloudMonitoringError","of","toPromise","projectName","CloudMonitoringMetricFindQuery","datasource","query","getDefaultProject","selectedQueryType","MetricFindQueryTypes","Projects","Services","MetricTypes","LabelKeys","LabelValues","ResourceTypes","Aligners","AlignmentPeriods","Aggregations","SLOServices","SLO","Selectors","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","console","getProjects","projects","s","text","label","value","expandable","getMetricTypes","metricDescriptors","services","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","labelKeys","toFindQueryResult","labelKey","getLabels","labels","interpolatedKey","values","hasOwnProperty","descriptor","find","m","getAlignmentOptionsByMetric","valueType","metricKind","getAggregationOptionsByMetric","getSLOServices","selectedSLOService","getServiceLevelObjectives","slos","selectors","alignmentPeriods","x","isString","CloudMonitoringVariableQueryEditor","props","queryTypes","defaults","metricTypes","sloServices","loading","onPropsChange","state","queryModel","onChange","refId","Object","assign","some","getTemplateSrv","length","setState","queryType","metricType","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","l","variableOptionGroup","expanded","getVariables","v","name","allowCustomValue","onProjectChange","onServiceChange","onMetricTypeChange","onLabelKeyChange","className","onQueryTypeChange","renderQueryTypeSwitch","PureComponent","CloudMonitoringVariableSupport","editor","metricFindQuery","bind","request","executeObservable","from","execute","targets","ensureGCEDefaultProject","mergeMap","CustomVariableSupport","CloudMonitoringDatasource","instanceSettings","timeSrv","getTimeSrv","authenticationType","jsonData","api","API","variables","t","migrateQuery","intervalMs","annotation","queries","datasourceId","id","view","crossSeriesReducer","perSeriesAligner","target","scopedVars","title","tags","filters","interpolateFilters","post","range","valueOf","toString","to","dataQueryResponse","toDataQueryResponse","df","i","j","fields","push","time","Date","parse","get","metricQuery","sloQuery","interpolateProps","groupBys","interpolateGroupBys","editorMode","QueryType","METRICS","timeRange","results","meta","defaultErrorMessage","test","status","message","statusText","_","code","getGCEDefaultProject","defaultProject","err","throwError","gceDefaultProject","serviceId","p","goal","projectId","hide","key","maxLines","metric","rest","object","entries","reduce","acc","selectorName","sloId","EditorMode","MQL","applyTemplateVariables","completeFilter","chunk","operator","condition","filter","flatten","interpolatedGroupBys","forEach","gb","interpolated","Array","isArray","concat","DataSourceWithBackend","CloudMonitoringConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","AuthType","JWT","current","secureJsonData","secureJsonFields","authenticationTypes","authTypes","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","resetValidationMessages","inputDataValid","json","jsonText","validateJwt","save","e","JSON","originalEvent","clipboardData","getData","templateUrl","CloudMonitoringAnnotationsQueryCtrl","onQueryChange","plugin","DataSourcePlugin","setQueryEditor","QueryEditor","setConfigCtrl","setAnnotationQueryCtrl","setVariableQueryEditor"],"mappings":"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","file":"cloudMonitoringPlugin.1c3a1c85d09a392be724.js","sourcesContent":["import { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { SelectableValue } from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\n\nimport appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\nimport { formatCloudMonitoringError } from './functions';\nimport { MetricDescriptor } from './types';\n\nexport interface PostResponse {\n  results: Record<string, any>;\n}\n\ninterface Options {\n  responseMap?: (res: any) => SelectableValue<string> | MetricDescriptor;\n  baseUrl?: string;\n  useCache?: boolean;\n}\n\nexport default class Api {\n  cache: { [key: string]: Array<SelectableValue<string>> };\n  defaultOptions: Options;\n\n  constructor(private baseUrl: string) {\n    this.cache = {};\n    this.defaultOptions = {\n      useCache: true,\n      responseMap: (res: any) => res,\n      baseUrl: this.baseUrl,\n    };\n  }\n\n  get(path: string, options?: Options): Promise<Array<SelectableValue<string>> | MetricDescriptor[]> {\n    const { useCache, responseMap, baseUrl } = { ...this.defaultOptions, ...options };\n\n    if (useCache && this.cache[path]) {\n      return Promise.resolve(this.cache[path]);\n    }\n\n    return getBackendSrv()\n      .fetch<Record<string, any>>({\n        url: baseUrl + path,\n        method: 'GET',\n      })\n      .pipe(\n        map((response) => {\n          const responsePropName = path.match(/([^\\/]*)\\/*$/)![1].split('?')[0];\n          let res = [];\n          if (response && response.data && response.data[responsePropName]) {\n            res = response.data[responsePropName].map(responseMap);\n          }\n\n          if (useCache) {\n            this.cache[path] = res;\n          }\n\n          return res;\n        }),\n        catchError((error) => {\n          appEvents.emit(CoreEvents.dsRequestError, {\n            error: { data: { error: formatCloudMonitoringError(error) } },\n          });\n          return of([]);\n        })\n      )\n      .toPromise();\n  }\n\n  post(data: Record<string, any>): Observable<FetchResponse<PostResponse>> {\n    return getBackendSrv().fetch<PostResponse>({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data,\n    });\n  }\n\n  test(projectName: string) {\n    return getBackendSrv()\n      .fetch<any>({\n        url: `${this.baseUrl}${projectName}/metricDescriptors`,\n        method: 'GET',\n      })\n      .toPromise();\n  }\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods, MetricKind, selectors, ValueTypes } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery, MetricFindQueryTypes } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return selectors.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { VariableQueryField } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\nimport CloudMonitoringDatasource from '../datasource';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices,\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import _ from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  DataQueryResponse,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { CloudMonitoringOptions, CloudMonitoringQuery, Filter, MetricDescriptor, QueryType, EditorMode } from './types';\nimport API from './api';\nimport { DataSourceWithBackend, toDataQueryResponse } from '@grafana/runtime';\nimport { CloudMonitoringVariableSupport } from './variables';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { from, Observable, of, throwError } from 'rxjs';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  api: API;\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.api = new API(`${instanceSettings.url!}/cloudmonitoring/v3/projects/`);\n    this.variables = new CloudMonitoringVariableSupport(this);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasourceId: this.id,\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    return this.api\n      .post({\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      })\n      .pipe(\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const df: any = [];\n          if (dataQueryResponse.data.length !== 0) {\n            for (let i = 0; i < dataQueryResponse.data.length; i++) {\n              for (let j = 0; j < dataQueryResponse.data[i].fields[0].values.length; j++) {\n                df.push({\n                  annotation: annotation,\n                  time: Date.parse(dataQueryResponse.data[i].fields[0].values.get(j)),\n                  title: dataQueryResponse.data[i].fields[1].values.get(j),\n                  tags: [],\n                  text: dataQueryResponse.data[i].fields[3].values.get(j),\n                });\n              }\n            }\n          }\n          return df;\n        })\n      )\n      .toPromise();\n  }\n\n  applyTemplateVariables(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): Record<string, any> {\n    return {\n      datasourceId: this.id,\n      refId,\n      intervalMs: this.intervalMs,\n      type: 'timeSeriesQuery',\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasourceId: this.id,\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(groupBys || [], {}),\n            crossSeriesReducer: 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return of({ results: [] }).toPromise();\n    }\n\n    return from(this.ensureGCEDefaultProject())\n      .pipe(\n        mergeMap(() => {\n          return this.api.post({\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries,\n          });\n        }),\n        map(({ data }) => {\n          return data;\n        }),\n        map((response) => {\n          const result = response.results[refId];\n          return result && result.meta ? result.meta.labels : {};\n        })\n      )\n      .toPromise();\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Google Cloud Monitoring API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const response = await this.api.test(this.getDefaultProject());\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Google Cloud Monitoring API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Google Cloud Monitoring: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return this.api\n      .post({\n        queries: [\n          {\n            refId: 'getGCEDefaultProject',\n            type: 'getGCEDefaultProject',\n            datasourceId: this.id,\n          },\n        ],\n      })\n      .pipe(\n        map(({ data }) => {\n          return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n            ? data.results.getGCEDefaultProject.meta.defaultProject\n            : '';\n        }),\n        catchError((err) => {\n          return throwError(err.data.error);\n        })\n      )\n      .toPromise();\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.api.get(`${this.templateSrv.replace(projectName)}/metricDescriptors`, {\n      responseMap: (m: any) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      },\n    }) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`${this.templateSrv.replace(projectName)}/services?pageSize=1000`, {\n      responseMap: ({ name, displayName }: { name: string; displayName: string }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName || name.match(/([^\\/]*)\\/*$/)![1],\n      }),\n    });\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.api.get(`${p}/services/${s}/serviceLevelObjectives`, {\n      responseMap: ({ name, displayName, goal }: { name: string; displayName: string; goal: number }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName,\n        goal,\n      }),\n    });\n  }\n\n  getProjects() {\n    return this.api.get(`projects`, {\n      responseMap: ({ projectId, name }: { projectId: string; name: string }) => ({\n        value: projectId,\n        label: name,\n      }),\n      baseUrl: `${this.instanceSettings.url!}/cloudresourcemanager/v1/`,\n    });\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && _.isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map((query) => this.applyTemplateVariables(query, scopedVars) as CloudMonitoringQuery);\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport { AuthType, authTypes } from './types';\n\nexport interface JWT {\n  private_key: string;\n  token_uri: string;\n  client_email: string;\n  project_id: string;\n}\n\nexport class CloudMonitoringConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/cloud-monitoring/partials/config.html';\n  datasourceSrv: DatasourceSrv;\n  current: any;\n  meta: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: Array<{ key: AuthType; value: string }>;\n  defaultAuthenticationType: string;\n  name: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = AuthType.JWT;\n    this.datasourceSrv = datasourceSrv;\n    this.name = this.meta.name;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = authTypes;\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport CloudMonitoringDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringConfigCtrl } from './config_ctrl';\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditor(QueryEditor)\n  .setConfigCtrl(CloudMonitoringConfigCtrl)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"sourceRoot":""}