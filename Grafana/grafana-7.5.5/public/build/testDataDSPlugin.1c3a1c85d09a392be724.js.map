{"version":3,"sources":["webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts","webpack:///./public/app/plugins/datasource/testdata/variables.ts","webpack:///./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack:///./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/ManualEntryEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/constants.ts","webpack:///./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/module.tsx"],"names":["queryMetricTree","query","indexOf","name","children","queryTree","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","pattern","RegExp","test","concat","buildMetricTree","parent","depth","letter","nodeName","push","index","getNextWord","Math","floor","random","words","defaultQuery","type","speed","spread","noise","bands","runStream","target","req","defaults","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","data","CircularDataFrame","append","capacity","alias","addField","FieldType","time","number","i","suffix","value","timeoutId","addNextRow","idx","fields","values","add","min","max","Date","now","setTimeout","pushNextEvent","next","key","state","LoadingState","Streaming","console","log","clearTimeout","runSignalStream","string","meta","preferredVisualisationType","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","done","Done","complete","read","then","url","Error","fetch","Request","response","body","getReader","runFetchStream","TestDataVariableSupport","stringInput","scenarioId","csvWave","points","StandardVariableSupport","nodes","NodeGraphDataFrameFieldNames","id","config","links","title","internal","queryType","datasourceUid","datasourceName","displayName","subTitle","mainStat","unit","secondaryStat","arc","color","mode","FieldColorModeId","Fixed","fixedColor","edges","source","makeRandomNode","success","error","toString","stat1","stat2","TestDataDataSource","instanceSettings","templateSrv","getTemplateSrv","variables","options","backendQueries","streams","targets","hide","runGrafanaLiveQuery","runGrafanaAPI","runArrowFile","this","annotationDataTopicTest","variablesQuery","nodesQuery","backendOpts","of","merge","events","buildFakeAnnotationEvents","range","dataFrame","ArrayDataFrame","dataTopic","DataTopic","Annotations","pipe","delay","count","timeWalker","from","valueOf","step","to","tags","Promise","resolve","status","message","scenariosCache","getResource","items","getSearchFilterScopedVar","wildcardChar","scopedVars","map","item","frames","root","nodesWithoutMaxEdges","maxEdges","sourceIndex","splice","additionalEdges","targetIndex","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","Object","keys","edgeFields","edgesFrame","edgesSet","Set","arc__success","arc__errors","edge","has","generateRandomNodes","DataSourceWithBackend","table","base64StringToArrowTable","frame","arrowTableToDataFrame","e","warn","toDataQueryError","requestId","getBackendSrv","get","res","liveQueryCounter","channel","getLiveMeasurementsObserver","scope","LiveChannelScope","Grafana","namespace","path","TestInfoTab","props","className","href","rel","PureComponent","ConfigEditor","streamingClientFields","label","placeholder","types","StreamingClientEditor","onChange","onInputChange","Number","labelWidth","width","defaultValue","grow","ManualEntryEditor","onRunQuery","point","dateTime","format","onSubmit","newPointTime","dateMath","parse","newPointValue","sort","a","b","maxWidth","register","control","selectedPoint","watch","ref","variant","as","Select","undefined","onClick","setValue","filter","_","deletePoint","randomWalkFields","testSelectors","selectors","components","DataSource","TestData","QueryTab","RandomWalkEditor","selector","aria-label","tooltip","PredictablePulseEditor","pulseWave","CSVWaveEditor","defaultStreamQuery","timeStep","onCount","onValue","offCount","offValue","valuesCSV","lines","liveTestDataChannels","description","GrafanaLiveEditor","find","f","NodeGraphEditor","o","currentTarget","parseInt","showLabelsFor","endpoints","editorSelectors","TestDataAnnotationsQueryCtrl","template","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","useAsync","getScenarios","loading","scenarioList","onUpdate","currentScenario","useMemo","scenario","newValue","checked","onFieldChange","onStreamClientChange","onPulseWaveChange","onCSVWaveChange","localeCompare","showLabels","includes","scenarioSelectContainer","sc","update","labels","levelColumn","ep","rows","val","setAnnotationQueryCtrl","addConfigPage","icon"],"mappings":"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","file":"testDataDSPlugin.1c3a1c85d09a392be724.js","sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\n\nexport const defaultQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Signal ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'value', type: FieldType.number });\n\n    const { spread, speed, bands = 0, noise } = query;\n\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      data.addField({ name: 'Min' + suffix, type: FieldType.number });\n      data.addField({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      let idx = 0;\n      data.fields[idx++].values.add(time);\n      data.fields[idx++].values.add(value);\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.fields[idx++].values.add(min);\n        data.fields[idx++].values.add(max);\n      }\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: LoadingState.Streaming,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(Date.now());\n      data.fields[1].values.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery } from './types';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestDataQuery {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: 'variables-query',\n      csvWave: null,\n      points: [],\n    };\n  }\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType } from '@grafana/data';\nimport { NodeGraphDataFrameFieldNames } from '@grafana/ui';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553,\n        15.906441318223264,\n        4.913011921591567,\n        7.4163203042094095,\n        1092,\n        22.85961441405067,\n        56.135855729084696,\n        4.45946191601527,\n        12.818300278280843,\n        4.25,\n        12.565442646791492,\n        77.63447512700567,\n        40.387096774193544,\n        77.63447512700567,\n        27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667,\n        682.4,\n        512.8416666666667,\n        125.64444444444445,\n        0.005585812037424941,\n        137.59722222222223,\n        300.0527777777778,\n        30.582348853370394,\n        125.77222222222223,\n        0.028706417080318163,\n        30.582348853370394,\n        165.675,\n        0.100021510002151,\n        165.675,\n        162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882,\n        1,\n        1,\n        1,\n        0.5,\n        1,\n        0.9901128505170387,\n        0.9069260134520997,\n        1,\n        0,\n        0.9069260134520997,\n        0.9624432037288534,\n        0,\n        0.9624432037288534,\n        0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'faults' },\n      values: [\n        0,\n        0,\n        0,\n        0,\n        0.5,\n        0,\n        0.009479813736472288,\n        0,\n        0,\n        0,\n        0,\n        0.017168821152524185,\n        0,\n        0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0.0004073357464890436,\n        0.09307398654790038,\n        0,\n        1,\n        0.09307398654790038,\n        0.02038797511862247,\n        1,\n        0.02038797511862247,\n        0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667,\n        125.77222222222223,\n        0.03333333333333333,\n        137.59722222222223,\n        0.022222222222222223,\n        299.96666666666664,\n        162.33055555555555,\n        0.005555555555555556,\n        125.64444444444445,\n        30.582348853370394,\n        50.51111111111111,\n        299.9166666666667,\n        0.100021510002151,\n        165.675,\n        682.4,\n        162.33055555555555,\n        30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import { ArrayVector, FieldType, MutableDataFrame } from '@grafana/data';\nimport { nodes, edges } from './testData/serviceMapResponse';\nimport { NodeGraphDataFrameFieldNames } from '@grafana/ui';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: '0',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[sourceIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[sourceIndex].id);\n  }\n\n  const nodeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green' } },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red' } },\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.source]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.target]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: Object.keys(edgeFields).map((key) => ({\n      ...edgeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields.subTitle.values.add(node.subTitle);\n    nodeFields.mainStat.values.add(node.stat1);\n    nodeFields.secondaryStat.values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgeFields.id.values.add(`${node.id}--${edge}`);\n      edgeFields.source.values.add(node.id);\n      edgeFields.target.values.add(edge);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: index.toString(),\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse(): any {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n","import { from, merge, Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  arrowTableToDataFrame,\n  base64StringToArrowTable,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport {\n  DataSourceWithBackend,\n  getBackendSrv,\n  getLiveMeasurementsObserver,\n  getTemplateSrv,\n  TemplateSrv,\n  toDataQueryError,\n} from '@grafana/runtime';\nimport { queryMetricTree } from './metricTree';\nimport { runStream } from './runStreams';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\nimport { TestDataVariableSupport } from './variables';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'arrow':\n          streams.push(runArrowFile(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 10);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput;\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n}\n\nfunction runArrowFile(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  let data: DataFrame[] = [];\n  if (target.stringInput && target.stringInput.length > 10) {\n    try {\n      const table = base64StringToArrowTable(target.stringInput);\n      const frame = arrowTableToDataFrame(table);\n      frame.refId = target.refId;\n      data = [frame];\n    } catch (e) {\n      console.warn('Error reading saved arrow', e);\n      const error = toDataQueryError(e);\n      error.refId = target.refId;\n      return of({ state: LoadingState.Error, error, data });\n    }\n  }\n  return of({ state: LoadingState.Done, data, key: req.requestId + target.refId });\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getLiveMeasurementsObserver(\n    {\n      scope: LiveChannelScope.Grafana,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    `testStream.${liveQueryCounter++}`\n  );\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <a\n          className=\"btn btn-inverse\"\n          href=\"https://github.com/grafana/grafana/tree/master/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { dateMath, dateTime, SelectableValue } from '@grafana/data';\nimport { Form, InlineField, InlineFieldRow, Input, InputControl, Select, Button } from '@grafana/ui';\nimport { EditorProps } from '../QueryEditor';\nimport { NewPoint } from '../types';\n\nexport interface Props extends EditorProps {\n  onRunQuery: () => void;\n}\n\nexport const ManualEntryEditor = ({ onChange, query, onRunQuery }: Props) => {\n  const addPoint = (point: NewPoint) => {\n    const newPointTime = dateMath.parse(point.newPointTime);\n    const points = [...query.points, [Number(point.newPointValue), newPointTime!.valueOf()]].sort(\n      (a, b) => a[1] - b[1]\n    );\n    onChange({ ...query, points });\n    onRunQuery();\n  };\n\n  const deletePoint = (point: SelectableValue) => {\n    const points = query.points.filter((_, index) => index !== point.value);\n    onChange({ ...query, points });\n    onRunQuery();\n  };\n\n  const points = query.points.map((point, index) => {\n    return {\n      label: dateTime(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n      value: index,\n    };\n  });\n\n  return (\n    <Form onSubmit={addPoint} maxWidth=\"none\">\n      {({ register, control, watch }) => {\n        const selectedPoint = watch('selectedPoint') as SelectableValue;\n        return (\n          <InlineFieldRow>\n            <InlineField label=\"New value\" labelWidth={14}>\n              <Input\n                width={32}\n                type=\"number\"\n                placeholder=\"value\"\n                id={`newPointValue-${query.refId}`}\n                name=\"newPointValue\"\n                ref={register}\n              />\n            </InlineField>\n            <InlineField label=\"Time\" labelWidth={14}>\n              <Input\n                width={32}\n                id={`newPointTime-${query.refId}`}\n                placeholder=\"time\"\n                name=\"newPointTime\"\n                ref={register}\n                defaultValue={dateTime().format()}\n              />\n            </InlineField>\n            <InlineField>\n              <Button variant=\"secondary\">Add</Button>\n            </InlineField>\n            <InlineField label=\"All values\">\n              <InputControl\n                control={control}\n                as={Select}\n                options={points}\n                width={32}\n                name=\"selectedPoint\"\n                onChange={(value) => value[0]}\n                placeholder=\"Select point\"\n              />\n            </InlineField>\n\n            {selectedPoint?.value !== undefined && (\n              <InlineField>\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  onClick={() => {\n                    control.setValue('selectedPoint', [{ value: undefined, label: 'Select value' }]);\n                    deletePoint(selectedPoint);\n                  }}\n                >\n                  Delete\n                </Button>\n              </InlineField>\n            )}\n          </InlineFieldRow>\n        );\n      }}\n    </Form>\n  );\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={query[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { EditorProps } from '../QueryEditor';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { EditorProps } from '../QueryEditor';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nconst fields = [\n  {\n    label: 'Step',\n    type: 'number',\n    id: 'timeStep',\n    placeholder: '60',\n    tooltip: 'The number of seconds between datapoints.',\n  },\n  {\n    label: 'CSV Values',\n    type: 'text',\n    id: 'valuesCSV',\n    placeholder: '1,2,3,4',\n    tooltip:\n      'Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed.',\n  },\n];\nexport const CSVWaveEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, type, placeholder, tooltip }, index) => {\n        const grow = index === fields.length - 1;\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip} grow={grow}>\n            <Input\n              width={grow ? undefined : 32}\n              type={type}\n              name={id}\n              id={`csvWave.${id}-${query.refId}`}\n              value={query.csvWave?.[id]}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { defaultQuery as defaultStreamQuery } from './runStreams';\nimport { TestDataQuery } from './types';\n\nexport const defaultPulse: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWave: any = {\n  timeStep: 60,\n  valuesCSV: '0,0,2,2,1,1',\n};\n\nexport const defaultQuery: TestDataQuery = {\n  points: [],\n  stream: defaultStreamQuery,\n  pulseWave: defaultPulse,\n  csvWave: defaultCSVWave,\n  stringInput: '',\n  scenarioId: 'random_walk',\n  lines: 10,\n  refId: '',\n  alias: '',\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n","// Libraries\nimport React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\n// Components\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { Input, InlineFieldRow, InlineField, Select, TextArea, InlineSwitch } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { StreamingClientEditor, ManualEntryEditor, RandomWalkEditor } from './components';\n\n// Types\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery, Scenario, NodesQuery } from './types';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { CSVWaveEditor } from './components/CSVWaveEditor';\nimport { defaultQuery } from './constants';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse', 'predictable_csv_wave'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync<Scenario[]>(async () => {\n    return datasource.getScenarios();\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(() => scenarioList?.find((scenario) => scenario.id === query.scenarioId), [\n    scenarioList,\n    query,\n  ]);\n  const scenarioId = currentScenario?.id;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    const update = { ...query, scenarioId: item.value! };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    if (scenario.id === 'grafana_api') {\n      update.stringInput = 'datasources';\n    } else if (scenario.id === 'streaming_client') {\n      update.stringInput = '';\n    } else if (scenario.id === 'live') {\n      if (!update.channel) {\n        update.channel = 'random-2s-stream'; // default stream\n      }\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...query[field as keyof TestDataQuery], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onCSVWaveChange = onFieldChange('csvWave');\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        <InlineField label=\"Alias\" labelWidth={14}>\n          <Input\n            width={32}\n            id={`alias-${query.refId}`}\n            type=\"text\"\n            placeholder=\"optional\"\n            pattern='[^<>&\\\\\"]+'\n            name=\"alias\"\n            value={query.alias}\n            onChange={onInputChange}\n          />\n        </InlineField>\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'manual_entry' && <ManualEntryEditor onChange={onUpdate} query={query} onRunQuery={onRunQuery} />}\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} />}\n      {scenarioId === 'streaming_client' && <StreamingClientEditor onChange={onStreamClientChange} query={query} />}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && <PredictablePulseEditor onChange={onPulseWaveChange} query={query} />}\n      {scenarioId === 'predictable_csv_wave' && <CSVWaveEditor onChange={onCSVWaveChange} query={query} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"sourceRoot":""}