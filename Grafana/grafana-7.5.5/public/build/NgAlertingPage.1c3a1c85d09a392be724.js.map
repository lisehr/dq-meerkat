{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./node_modules/react-use/esm/useIsomorphicLayoutEffect.js","webpack:///./node_modules/react-use/esm/useObservable.js","webpack:///./public/app/features/alerting/components/AlertingQueryEditor.tsx","webpack:///./public/app/features/alerting/components/AlertDefinitionOptions.tsx","webpack:///./public/app/features/alerting/components/PreviewQueryTab.tsx","webpack:///./public/app/features/alerting/components/AlertingQueryPreview.tsx","webpack:///./public/app/features/alerting/components/PreviewInstancesTab.tsx","webpack:///./public/app/features/alerting/NextGenAlertingPage.tsx"],"names":["getAlertRulesAsync","options","dispatch","loadAlertRules","getBackendSrv","get","rules","config","featureToggles","ngalert","ngAlertDefinitions","setAlertDefinitions","results","loadedAlertRules","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","createNotificationChannel","data","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","alertError","error","updateNotificationChannel","put","testNotificationChannel","channel","notificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","sort","o1","o2","name","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","getAlertDefinition","alertDefinition","setAlertDefinition","createAlertDefinition","getStore","buildAlertDefinition","updateAlertDefinition","uid","updatedAlertDefinition","updateAlertDefinitionUiState","uiState","nextState","setUiState","store","setObject","ALERT_DEFINITION_UI_STATE_STORAGE_KEY","console","updateAlertDefinitionOption","updateAlertDefinitionOptions","queryOptionsChange","queryOptions","setQueryOptions","onRunQueries","queryRunner","timeRange","from","to","getQueryOptions","run","timezone","dateMath","parse","raw","maxDataPoints","minInterval","queries","datasource","dataSource","evaluateAlertDefinition","response","handledResponse","handleBase64Response","instances","setInstanceData","evaluateNotSavedAlertDefinition","getDataSourceSrv","defaultDataSource","condition","buildDataQueryModel","cleanUpDefinitionState","cleanUpState","undefined","currentAlertDefinition","frames","dataFrames","map","instance","table","base64StringToArrowTable","arrowTableToDataFrame","applyFieldOverrides","fieldConfig","defaults","overrides","replaceVariables","value","theme","isExpression","ExpressionDatasourceID","dataSourceSetting","getInstanceSettings","model","type","queryType","datasourceUid","refId","relativeTimeRange","From","To","window","observable$","initialValue","_a","update","s","subscribe","unsubscribe","mapDispatchToProps","AlertingQueryEditor","connect","connector","onQueryOptionsChange","props","onIntervalChanged","interval","this","styles","getStyles","className","wrapper","container","refreshWrapper","onRefresh","intervals","onOptionsChange","PureComponent","stylesFactory","css","spacing","md","colors","panelBg","editorWrapper","panelBorder","border","radius","intervalOptions","label","AlertDefinitionOptions","onChange","onIntervalChange","onConditionChange","useStyles","refIds","useMemo","q","active","width","title","description","rows","readOnly","optionRow","optionName","find","i","intervalSeconds","r","noOptionsMessage","border1","typography","size","formInputText","sm","Tabs","PreviewQueryTab","height","useState","currentSeries","setSeries","useTheme","series","frame","index","getFrameDisplayName","length","style","formInputHeight","selectWrapper","selectedValue","toDataFrame","PreviewInstancesTab","isTested","onTest","noQueries","noQueriesHeader","onClick","tabs","Query","text","Instances","AlertingQueryPreview","getInstances","activeTab","setActiveTab","observable","getData","withFieldConfig","withTransforms","useObservable","tab","key","onChangeTab","tabContent","textSemiWeak","pageId","getRouteParamsId","NextGenAlertingPageUnconnected","onChangeAlertOption","event","formEvent","currentTarget","onChangeInterval","onSaveAlert","onDiscard","variant","pageIcon","renderToolbarActions","splitPanesWrapper","leftPaneComponents","updateUiState","rightPaneComponents","hot","module","dashboardBg"],"mappings":"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","file":"NgAlertingPage.1c3a1c85d09a392be724.js","sourcesContent":["import {\n  AppEvents,\n  applyFieldOverrides,\n  arrowTableToDataFrame,\n  base64StringToArrowTable,\n  DataSourceApi,\n  dateMath,\n} from '@grafana/data';\nimport { config, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport { updateLocation } from 'app/core/actions';\nimport store from 'app/core/store';\nimport {\n  ALERT_DEFINITION_UI_STATE_STORAGE_KEY,\n  cleanUpState,\n  loadAlertRules,\n  loadedAlertRules,\n  notificationChannelLoaded,\n  setAlertDefinition,\n  setAlertDefinitions,\n  setInstanceData,\n  setNotificationChannels,\n  setQueryOptions,\n  setUiState,\n  updateAlertDefinitionOptions,\n} from './reducers';\nimport {\n  AlertDefinition,\n  AlertDefinitionState,\n  AlertDefinitionUiState,\n  AlertRuleDTO,\n  NotifierDTO,\n  QueryGroupDataSource,\n  QueryGroupOptions,\n  ThunkResult,\n} from 'app/types';\nimport { ExpressionDatasourceID } from '../../expressions/ExpressionDatasource';\nimport { ExpressionQuery } from '../../expressions/types';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n\n    if (config.featureToggles.ngalert) {\n      const ngAlertDefinitions = await getBackendSrv().get('/api/alert-definitions');\n      dispatch(setAlertDefinitions(ngAlertDefinitions.results));\n    }\n\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification created']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      appEvents.emit(AppEvents.alertSuccess, ['Notification updated']);\n      dispatch(updateLocation({ path: 'alerting/notifications' }));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.error]);\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n\nexport function getAlertDefinition(id: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertDefinition = await getBackendSrv().get(`/api/alert-definitions/${id}`);\n    dispatch(setAlertDefinition(alertDefinition));\n  };\n}\n\nexport function createAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const alertDefinition = await buildAlertDefinition(getStore().alertDefinition);\n\n    await getBackendSrv().post(`/api/alert-definitions`, alertDefinition);\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition created']);\n    dispatch(updateLocation({ path: 'alerting/list' }));\n  };\n}\n\nexport function updateAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const alertDefinition = await buildAlertDefinition(getStore().alertDefinition);\n\n    const updatedAlertDefinition = await getBackendSrv().put(\n      `/api/alert-definitions/${alertDefinition.uid}`,\n      alertDefinition\n    );\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition updated']);\n    dispatch(setAlertDefinition(updatedAlertDefinition));\n  };\n}\n\nexport function updateAlertDefinitionUiState(uiState: Partial<AlertDefinitionUiState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().alertDefinition.uiState, ...uiState };\n    dispatch(setUiState(nextState));\n\n    try {\n      store.setObject(ALERT_DEFINITION_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function updateAlertDefinitionOption(alertDefinition: Partial<AlertDefinition>): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(updateAlertDefinitionOptions(alertDefinition));\n  };\n}\n\nexport function queryOptionsChange(queryOptions: QueryGroupOptions): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(setQueryOptions(queryOptions));\n  };\n}\n\nexport function onRunQueries(): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const { queryRunner, getQueryOptions } = getStore().alertDefinition;\n    const timeRange = { from: 'now-1h', to: 'now' };\n    const queryOptions = getQueryOptions();\n\n    queryRunner!.run({\n      // if the queryRunner is undefined here somethings very wrong so it's ok to throw an unhandled error\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource.name!,\n    });\n  };\n}\n\nexport function evaluateAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { alertDefinition } = getStore().alertDefinition;\n\n    const response: { instances: string[] } = await getBackendSrv().get(\n      `/api/alert-definitions/eval/${alertDefinition.uid}`\n    );\n\n    const handledResponse = handleBase64Response(response.instances);\n\n    dispatch(setInstanceData(handledResponse));\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition tested successfully']);\n  };\n}\n\nexport function evaluateNotSavedAlertDefinition(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { alertDefinition, getQueryOptions } = getStore().alertDefinition;\n    const defaultDataSource = await getDataSourceSrv().get(null);\n\n    const response: { instances: string[] } = await getBackendSrv().post('/api/alert-definitions/eval', {\n      condition: alertDefinition.condition,\n      data: buildDataQueryModel(getQueryOptions(), defaultDataSource),\n    });\n\n    const handledResponse = handleBase64Response(response.instances);\n    dispatch(setInstanceData(handledResponse));\n    appEvents.emit(AppEvents.alertSuccess, ['Alert definition tested successfully']);\n  };\n}\n\nexport function cleanUpDefinitionState(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(cleanUpState(undefined));\n  };\n}\n\nasync function buildAlertDefinition(state: AlertDefinitionState) {\n  const queryOptions = state.getQueryOptions();\n  const currentAlertDefinition = state.alertDefinition;\n  const defaultDataSource = await getDataSourceSrv().get(null);\n\n  return {\n    ...currentAlertDefinition,\n    data: buildDataQueryModel(queryOptions, defaultDataSource),\n  };\n}\n\nfunction handleBase64Response(frames: string[]) {\n  const dataFrames = frames.map((instance) => {\n    const table = base64StringToArrowTable(instance);\n    return arrowTableToDataFrame(table);\n  });\n\n  return applyFieldOverrides({\n    data: dataFrames,\n    fieldConfig: {\n      defaults: {},\n      overrides: [],\n    },\n    replaceVariables: (value: any) => value,\n    theme: config.theme,\n  });\n}\n\nfunction buildDataQueryModel(queryOptions: QueryGroupOptions, defaultDataSource: DataSourceApi) {\n  return queryOptions.queries.map((query) => {\n    let dataSource: QueryGroupDataSource;\n    const isExpression = query.datasource === ExpressionDatasourceID;\n\n    if (isExpression) {\n      dataSource = { name: ExpressionDatasourceID, uid: ExpressionDatasourceID };\n    } else {\n      const dataSourceSetting = getDataSourceSrv().getInstanceSettings(query.datasource);\n\n      dataSource = {\n        name: dataSourceSetting?.name ?? defaultDataSource.name,\n        uid: dataSourceSetting?.uid ?? defaultDataSource.uid,\n      };\n    }\n\n    return {\n      model: {\n        ...query,\n        type: isExpression ? (query as ExpressionQuery).type : query.queryType,\n        datasource: dataSource.name,\n        datasourceUid: dataSource.uid,\n      },\n      refId: query.refId,\n      relativeTimeRange: {\n        From: 500,\n        To: 0,\n      },\n    };\n  });\n}\n","import { useEffect, useLayoutEffect } from 'react';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nfunction useObservable(observable$, initialValue) {\n    var _a = useState(initialValue), value = _a[0], update = _a[1];\n    useIsomorphicLayoutEffect(function () {\n        var s = observable$.subscribe(update);\n        return function () { return s.unsubscribe(); };\n    }, [observable$]);\n    return value;\n}\nexport default useObservable;\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { css } from 'emotion';\nimport { GrafanaTheme } from '@grafana/data';\nimport { RefreshPicker, stylesFactory } from '@grafana/ui';\n\nimport { config } from 'app/core/config';\nimport { QueryGroup } from '../../query/components/QueryGroup';\nimport { onRunQueries, queryOptionsChange } from '../state/actions';\nimport { QueryGroupOptions, StoreState } from 'app/types';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    queryOptions: state.alertDefinition.getQueryOptions(),\n    queryRunner: state.alertDefinition.queryRunner,\n  };\n}\n\nconst mapDispatchToProps = {\n  queryOptionsChange,\n  onRunQueries,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass AlertingQueryEditorUnconnected extends PureComponent<Props> {\n  onQueryOptionsChange = (queryOptions: QueryGroupOptions) => {\n    this.props.queryOptionsChange(queryOptions);\n  };\n\n  onRunQueries = () => {\n    this.props.onRunQueries();\n  };\n\n  onIntervalChanged = (interval: string) => {\n    this.props.queryOptionsChange({ ...this.props.queryOptions, minInterval: interval });\n  };\n\n  render() {\n    const { queryOptions, queryRunner } = this.props;\n    const styles = getStyles(config.theme);\n\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.container}>\n          <h4>Queries</h4>\n          <div className={styles.refreshWrapper}>\n            <RefreshPicker\n              onIntervalChanged={this.onIntervalChanged}\n              onRefresh={this.onRunQueries}\n              intervals={['15s', '30s']}\n            />\n          </div>\n          <QueryGroup\n            queryRunner={queryRunner!} // if the queryRunner is undefined here somethings very wrong so it's ok to throw an unhandled error\n            options={queryOptions}\n            onRunQueries={this.onRunQueries}\n            onOptionsChange={this.onQueryOptionsChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const AlertingQueryEditor = connector(AlertingQueryEditorUnconnected);\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      padding-left: ${theme.spacing.md};\n      height: 100%;\n    `,\n    container: css`\n      padding: ${theme.spacing.md};\n      background-color: ${theme.colors.panelBg};\n      height: 100%;\n    `,\n    refreshWrapper: css`\n      display: flex;\n      justify-content: flex-end;\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.panelBorder};\n      border-radius: ${theme.border.radius.md};\n    `,\n  };\n});\n","import React, { FC, FormEvent, useMemo } from 'react';\nimport { css } from 'emotion';\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Field, Input, Select, Tab, TabContent, TabsBar, TextArea, useStyles } from '@grafana/ui';\nimport { AlertDefinition, QueryGroupOptions } from 'app/types';\n\nconst intervalOptions: Array<SelectableValue<number>> = [\n  { value: 60, label: '1m' },\n  { value: 300, label: '5m' },\n  { value: 600, label: '10m' },\n];\n\ninterface Props {\n  alertDefinition: AlertDefinition;\n  onChange: (event: FormEvent<HTMLElement>) => void;\n  onIntervalChange: (interval: SelectableValue<number>) => void;\n  onConditionChange: (refId: SelectableValue<string>) => void;\n  queryOptions: QueryGroupOptions;\n}\n\nexport const AlertDefinitionOptions: FC<Props> = ({\n  alertDefinition,\n  onChange,\n  onIntervalChange,\n  onConditionChange,\n  queryOptions,\n}) => {\n  const styles = useStyles(getStyles);\n  const refIds = useMemo(() => queryOptions.queries.map((q) => ({ value: q.refId, label: q.refId })), [\n    queryOptions.queries,\n  ]);\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar>\n        <Tab label=\"Alert definition\" active={true} />\n      </TabsBar>\n      <TabContent className={styles.container}>\n        <Field label=\"Title\">\n          <Input width={25} name=\"title\" value={alertDefinition.title} onChange={onChange} />\n        </Field>\n        <Field label=\"Description\" description=\"What does the alert do and why was it created\">\n          <TextArea\n            rows={5}\n            width={25}\n            name=\"description\"\n            value={alertDefinition.description}\n            onChange={onChange}\n            readOnly={true}\n          />\n        </Field>\n        <Field label=\"Evaluate\">\n          <div className={styles.optionRow}>\n            <span className={styles.optionName}>Every</span>\n            <Select\n              onChange={onIntervalChange}\n              value={intervalOptions.find((i) => i.value === alertDefinition.intervalSeconds)}\n              options={intervalOptions}\n              width={10}\n            />\n          </div>\n        </Field>\n        <Field label=\"Conditions\">\n          <div className={styles.optionRow}>\n            <Select\n              onChange={onConditionChange}\n              value={refIds.find((r) => r.value === alertDefinition.condition)}\n              options={refIds}\n              noOptionsMessage=\"No queries added\"\n            />\n          </div>\n        </Field>\n      </TabContent>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      padding-top: ${theme.spacing.md};\n      height: 100%;\n    `,\n    container: css`\n      padding: ${theme.spacing.md};\n      background-color: ${theme.colors.panelBg};\n      height: 100%;\n      border-left: 1px solid ${theme.colors.border1};\n    `,\n    optionRow: css`\n      display: flex;\n      align-items: baseline;\n    `,\n    optionName: css`\n      font-size: ${theme.typography.size.md};\n      color: ${theme.colors.formInputText};\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n};\n","import React, { FC, useMemo, useState } from 'react';\nimport { getFrameDisplayName, GrafanaTheme, PanelData, SelectableValue, toDataFrame } from '@grafana/data';\nimport { Select, stylesFactory, Table, useTheme } from '@grafana/ui';\nimport { css } from 'emotion';\n\ninterface Props {\n  data?: PanelData;\n  width: number;\n  height: number;\n}\n\nexport const PreviewQueryTab: FC<Props> = ({ data, height, width }) => {\n  const [currentSeries, setSeries] = useState<number>(0);\n  const theme = useTheme();\n  const styles = getStyles(theme, height);\n  const series = useMemo<Array<SelectableValue<number>>>(() => {\n    if (data?.series) {\n      return data.series.map((frame, index) => ({ value: index, label: getFrameDisplayName(frame) }));\n    }\n\n    return [];\n  }, [data]);\n\n  // Select padding\n  const padding = 16;\n\n  if (!data?.series?.length) {\n    return <Table data={toDataFrame([])} height={height} width={width} />;\n  }\n\n  if (data.series.length > 1) {\n    return (\n      <div className={styles.wrapper}>\n        <div style={{ height: height - theme.spacing.formInputHeight - 16 }}>\n          <Table\n            data={data.series[currentSeries]}\n            height={height - theme.spacing.formInputHeight - padding}\n            width={width}\n          />\n        </div>\n        <div className={styles.selectWrapper}>\n          <Select\n            onChange={(selectedValue) => setSeries(selectedValue.value!)}\n            options={series}\n            value={currentSeries}\n          />\n        </div>\n      </div>\n    );\n  }\n  return <Table data={data.series[0]} height={height} width={width} />;\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme, height: number) => {\n  return {\n    wrapper: css`\n      height: ${height}px;\n    `,\n    selectWrapper: css`\n      padding: ${theme.spacing.md};\n    `,\n  };\n});\n","import React, { FC, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport { css } from 'emotion';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { DataFrame, DataQuery, GrafanaTheme, PanelData } from '@grafana/data';\nimport { Button, Icon, Tab, TabContent, TabsBar, useStyles } from '@grafana/ui';\nimport { PanelQueryRunner } from '../../query/state/PanelQueryRunner';\nimport { PreviewQueryTab } from './PreviewQueryTab';\nimport { PreviewInstancesTab } from './PreviewInstancesTab';\n\nenum Tabs {\n  Query = 'query',\n  Instances = 'instances',\n}\n\nconst tabs = [\n  { id: Tabs.Query, text: 'Query result' },\n  { id: Tabs.Instances, text: 'Alerting instances' },\n];\n\ninterface Props {\n  queryRunner: PanelQueryRunner;\n  getInstances: () => DataFrame[];\n  queries: DataQuery[];\n  onTest: () => void;\n  onRunQueries: () => void;\n}\n\nexport const AlertingQueryPreview: FC<Props> = ({ getInstances, onRunQueries, onTest, queryRunner, queries }) => {\n  const [activeTab, setActiveTab] = useState<string>(Tabs.Query);\n  const styles = useStyles(getStyles);\n\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), []);\n  const data = useObservable<PanelData>(observable);\n  const instances = getInstances();\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={`${tab.id}-${index}`}\n              label={tab.text}\n              onChangeTab={() => setActiveTab(tab.id)}\n              active={activeTab === tab.id}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {data && data.state === 'Error' ? (\n          <div className={styles.noQueries}>\n            <h4 className={styles.noQueriesHeader}>There was an error :(</h4>\n            <div>{data.error?.data?.error}</div>\n          </div>\n        ) : queries && queries.length > 0 ? (\n          <AutoSizer style={{ width: '100%', height: '100%' }}>\n            {({ width, height }) => {\n              switch (activeTab) {\n                case Tabs.Instances:\n                  return (\n                    <PreviewInstancesTab\n                      isTested={instances.length > 0}\n                      instances={instances}\n                      styles={styles}\n                      width={width}\n                      height={height}\n                      onTest={onTest}\n                    />\n                  );\n\n                case Tabs.Query:\n                default:\n                  if (data) {\n                    return <PreviewQueryTab data={data} width={width} height={height} />;\n                  }\n                  return (\n                    <div className={styles.noQueries}>\n                      <h4 className={styles.noQueriesHeader}>Run queries to view data.</h4>\n                      <Button onClick={onRunQueries}>Run queries</Button>\n                    </div>\n                  );\n              }\n            }}\n          </AutoSizer>\n        ) : (\n          <div className={styles.noQueries}>\n            <h4 className={styles.noQueriesHeader}>No queries added.</h4>\n            <div>Start adding queries to this alert and a visualisation for your queries will appear here.</div>\n            <div>\n              Learn more about how to create alert definitions <Icon name=\"external-link-alt\" />\n            </div>\n          </div>\n        )}\n      </TabContent>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      label: alertDefinitionPreviewTabs;\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      height: 100%;\n      padding: ${theme.spacing.md} 0 0 ${theme.spacing.md};\n    `,\n    tabContent: css`\n      background: ${theme.colors.panelBg};\n      height: 100%;\n    `,\n    noQueries: css`\n      color: ${theme.colors.textSemiWeak};\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n    `,\n    noQueriesHeader: css`\n      color: ${theme.colors.textSemiWeak};\n    `,\n  };\n};\n\nexport type PreviewStyles = ReturnType<typeof getStyles>;\n","import React, { FC } from 'react';\nimport { DataFrame } from '@grafana/data';\nimport { Button, Table } from '@grafana/ui';\nimport { PreviewStyles } from './AlertingQueryPreview';\n\ninterface Props {\n  instances: DataFrame[];\n  isTested: boolean;\n  styles: PreviewStyles;\n  width: number;\n  height: number;\n  onTest: () => void;\n}\n\nexport const PreviewInstancesTab: FC<Props> = ({ instances, isTested, onTest, height, styles, width }) => {\n  if (!isTested) {\n    return (\n      <div className={styles.noQueries}>\n        <h4 className={styles.noQueriesHeader}>You haven’t tested your alert yet.</h4>\n        <div>In order to see your instances, you need to test your alert first.</div>\n        <Button onClick={onTest}>Test alert now</Button>\n      </div>\n    );\n  }\n  return <Table data={instances[0]} height={height} width={width} />;\n};\n","import React, { FormEvent, PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { css } from 'emotion';\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { PageToolbar, stylesFactory, ToolbarButton } from '@grafana/ui';\n\nimport { config } from 'app/core/config';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { AlertingQueryEditor } from './components/AlertingQueryEditor';\nimport { AlertDefinitionOptions } from './components/AlertDefinitionOptions';\nimport { AlertingQueryPreview } from './components/AlertingQueryPreview';\nimport {\n  cleanUpDefinitionState,\n  createAlertDefinition,\n  evaluateAlertDefinition,\n  evaluateNotSavedAlertDefinition,\n  getAlertDefinition,\n  onRunQueries,\n  updateAlertDefinition,\n  updateAlertDefinitionOption,\n  updateAlertDefinitionUiState,\n} from './state/actions';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { StoreState } from 'app/types';\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n\n  return {\n    uiState: state.alertDefinition.uiState,\n    getQueryOptions: state.alertDefinition.getQueryOptions,\n    queryRunner: state.alertDefinition.queryRunner,\n    getInstances: state.alertDefinition.getInstances,\n    alertDefinition: state.alertDefinition.alertDefinition,\n    pageId: (pageId as string) ?? '',\n  };\n}\n\nconst mapDispatchToProps = {\n  updateAlertDefinitionUiState,\n  updateAlertDefinitionOption,\n  evaluateAlertDefinition,\n  updateAlertDefinition,\n  createAlertDefinition,\n  getAlertDefinition,\n  evaluateNotSavedAlertDefinition,\n  onRunQueries,\n  cleanUpDefinitionState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  saveDefinition: typeof createAlertDefinition | typeof updateAlertDefinition;\n}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass NextGenAlertingPageUnconnected extends PureComponent<Props> {\n  componentDidMount() {\n    const { getAlertDefinition, pageId } = this.props;\n\n    if (pageId) {\n      getAlertDefinition(pageId);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpDefinitionState();\n  }\n\n  onChangeAlertOption = (event: FormEvent<HTMLElement>) => {\n    const formEvent = event as FormEvent<HTMLFormElement>;\n    this.props.updateAlertDefinitionOption({ [formEvent.currentTarget.name]: formEvent.currentTarget.value });\n  };\n\n  onChangeInterval = (interval: SelectableValue<number>) => {\n    this.props.updateAlertDefinitionOption({\n      intervalSeconds: interval.value,\n    });\n  };\n\n  onConditionChange = (condition: SelectableValue<string>) => {\n    this.props.updateAlertDefinitionOption({\n      condition: condition.value,\n    });\n  };\n\n  onSaveAlert = () => {\n    const { alertDefinition, createAlertDefinition, updateAlertDefinition } = this.props;\n\n    if (alertDefinition.uid) {\n      updateAlertDefinition();\n    } else {\n      createAlertDefinition();\n    }\n  };\n\n  onDiscard = () => {};\n\n  onTest = () => {\n    const { alertDefinition, evaluateAlertDefinition, evaluateNotSavedAlertDefinition } = this.props;\n    if (alertDefinition.uid) {\n      evaluateAlertDefinition();\n    } else {\n      evaluateNotSavedAlertDefinition();\n    }\n  };\n\n  renderToolbarActions() {\n    return [\n      <ToolbarButton variant=\"destructive\" key=\"discard\" onClick={this.onDiscard}>\n        Discard\n      </ToolbarButton>,\n      <ToolbarButton key=\"test\" onClick={this.onTest}>\n        Test\n      </ToolbarButton>,\n      <ToolbarButton variant=\"primary\" key=\"save\" onClick={this.onSaveAlert}>\n        Save\n      </ToolbarButton>,\n    ];\n  }\n\n  render() {\n    const {\n      alertDefinition,\n      getInstances,\n      uiState,\n      updateAlertDefinitionUiState,\n      queryRunner,\n      getQueryOptions,\n      onRunQueries,\n    } = this.props;\n\n    const styles = getStyles(config.theme);\n    const queryOptions = getQueryOptions();\n\n    return (\n      <div className={styles.wrapper}>\n        <PageToolbar title=\"Alert editor\" pageIcon=\"bell\">\n          {this.renderToolbarActions()}\n        </PageToolbar>\n        <div className={styles.splitPanesWrapper}>\n          <SplitPaneWrapper\n            leftPaneComponents={[\n              <AlertingQueryPreview\n                key=\"queryPreview\"\n                queryRunner={queryRunner!} // if the queryRunner is undefined here somethings very wrong so it's ok to throw an unhandled error\n                getInstances={getInstances}\n                queries={queryOptions.queries}\n                onTest={this.onTest}\n                onRunQueries={onRunQueries}\n              />,\n              <AlertingQueryEditor key=\"queryEditor\" />,\n            ]}\n            uiState={uiState}\n            updateUiState={updateAlertDefinitionUiState}\n            rightPaneComponents={\n              <AlertDefinitionOptions\n                alertDefinition={alertDefinition}\n                onChange={this.onChangeAlertOption}\n                onIntervalChange={this.onChangeInterval}\n                onConditionChange={this.onConditionChange}\n                queryOptions={queryOptions}\n              />\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(connector(NextGenAlertingPageUnconnected));\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrapper: css`\n    width: calc(100% - 55px);\n    height: 100%;\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    background: ${theme.colors.dashboardBg};\n    display: flex;\n    flex-direction: column;\n  `,\n  splitPanesWrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n    position: relative;\n  `,\n}));\n"],"sourceRoot":""}