{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["DataSourcesList","dataSources","styles","layoutMode","useStyles","getStyles","className","list","map","dataSource","index","key","id","heading","name","href","Figure","src","typeLogoUrl","alt","Meta","typeName","url","isDefault","colorIndex","css","OrgActionBar","this","props","searchQuery","linkButton","setSearchQuery","target","linkProps","labelClassName","inputClassName","value","onChange","placeholder","title","PureComponent","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","loadDataSources","dataSourcesCount","navModel","setDataSourcesSearchQuery","hasFetched","Contents","isLoading","query","mapDispatchToProps","setDataSourcesLayoutMode","hot","module","connect","state","getNavModel","navIndex","getDataSources","getDataSourcesLayoutMode","getDataSourcesCount","getDataSourcesSearchQuery"],"mappings":"wVAyCeA,IA3B2B,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,YACrCC,GADmE,EAAjBC,WACzCC,oBAAUC,IAEzB,OACE,wBAAIC,UAAWJ,EAAOK,MACnBN,EAAYO,KAAI,SAACC,EAAYC,GAC5B,OACE,wBAAIC,IAAKF,EAAWG,IAClB,kBAAC,OAAD,CAAMC,QAASJ,EAAWK,KAAMC,KAAI,2BAAsBN,EAAWG,KACnE,kBAAC,OAAKI,OAAN,KACE,yBAAKC,IAAKR,EAAWS,YAAaC,IAAKV,EAAWK,QAEpD,kBAAC,OAAKM,KAAN,KACG,CACCX,EAAWY,SACXZ,EAAWa,IACXb,EAAWc,WAAa,kBAAC,MAAD,CAAKZ,IAAI,cAAcG,KAAM,UAAWU,WAAY,aAa9F,IAAMnB,EAAY,WAChB,MAAO,CACLE,KAAMkB,cAAF,Q,ggCClCaC,E,6WACV,MACqDC,KAAKC,MAAzDC,EADD,EACCA,YAAaC,EADd,EACcA,WAAYC,EAD1B,EAC0BA,eAAgBC,EAD1C,EAC0CA,OAC3CC,EAAY,CAAElB,KAAMe,EAAWf,MAMrC,OAJIiB,IACDC,EAAkBD,OAASA,GAI5B,yBAAK1B,UAAU,mBACb,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CACE4B,eAAe,0BACfC,eAAe,yBACfC,MAAOP,EACPQ,SAAUN,EACVO,YAAa,4BAGjB,yBAAKhC,UAAU,4BACf,kBAAC,aAAe2B,EAAYH,EAAWS,a,8BArBLC,kB,+nCC2B1C,IAAMC,EAAiB,CACrBF,MAAO,wCACPG,WAAY,WACZC,WAAY,kBACZC,YAAa,kBACbC,OAAQ,gEACRC,WAAY,8FACZC,gBAAiB,aACjBC,aAAc,UAGHC,EAAb,6E,UAAA,O,kOAAA,M,EAAA,G,EAAA,2CAEItB,KAAKC,MAAMsB,oBAFf,+BAKW,MASHvB,KAAKC,MAPP3B,EAFK,EAELA,YACAkD,EAHK,EAGLA,iBACAC,EAJK,EAILA,SACAjD,EALK,EAKLA,WACA0B,EANK,EAMLA,YACAwB,EAPK,EAOLA,0BACAC,EARK,EAQLA,WAQF,OACE,kBAAC,IAAD,CAAMF,SAAUA,GACd,kBAAC,IAAKG,SAAN,CAAeC,WAAYF,GACzB,oCACGA,GAAmC,IAArBH,GAA0B,kBAAC,IAAiBV,GAC1Da,GACCH,EAAmB,GAAK,CACtB,kBAAC,IAAD,CACEtB,YAAaA,EACbE,eAAgB,SAAC0B,GAAD,OAAWJ,EAA0BI,IACrD3B,WAfK,CACjBf,KAAM,kBACNwB,MAAO,mBAcK5B,IAAI,eAEN,kBAAC,IAAD,CAAiBV,YAAaA,EAAaE,WAAYA,EAAYQ,IAAI,kB,2BAlCvF,GAAyC6B,iBAsDzC,IAAMkB,EAAqB,CACzBR,oBACAG,8BACAM,8BAGaC,wBAAIC,EAAJD,CAAYE,mBAjB3B,SAAyBC,GACvB,MAAO,CACLX,SAAUY,YAAYD,EAAME,SAAU,eACtChE,YAAaiE,YAAeH,EAAM9D,aAClCE,WAAYgE,YAAyBJ,EAAM9D,aAC3CkD,iBAAkBiB,YAAoBL,EAAM9D,aAC5C4B,YAAawC,YAA0BN,EAAM9D,aAC7CqD,WAAYS,EAAM9D,YAAYqD,cAUkBI,EAAzBI,CAA6Cb,K","file":"DataSourcesListPage.1c3a1c85d09a392be724.js","sourcesContent":["// Libraries\nimport React, { FC } from 'react';\n\n// Types\nimport { DataSourceSettings } from '@grafana/data';\nimport { LayoutMode } from '../../core/components/LayoutSelector/LayoutSelector';\nimport { Card, Tag, useStyles } from '@grafana/ui';\nimport { css } from 'emotion';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport const DataSourcesList: FC<Props> = ({ dataSources, layoutMode }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <ul className={styles.list}>\n      {dataSources.map((dataSource, index) => {\n        return (\n          <li key={dataSource.id}>\n            <Card heading={dataSource.name} href={`datasources/edit/${dataSource.id}`}>\n              <Card.Figure>\n                <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n              </Card.Figure>\n              <Card.Meta>\n                {[\n                  dataSource.typeName,\n                  dataSource.url,\n                  dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                ]}\n              </Card.Meta>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default DataSourcesList;\n\nconst getStyles = () => {\n  return {\n    list: css`\n      list-style: none;\n    `,\n  };\n};\n","import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Search by name or type'}\n          />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton {...linkProps}>{linkButton.title}</LinkButton>\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { DataSourceSettings, NavModel } from '@grafana/data';\nimport { IconName } from '@grafana/ui';\nimport { StoreState } from 'app/types';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'There are no data sources defined yet',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <OrgActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={(query) => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\n"],"sourceRoot":""}