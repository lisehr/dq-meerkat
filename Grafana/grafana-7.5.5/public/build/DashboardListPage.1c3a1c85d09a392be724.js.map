{"version":3,"sources":["webpack:///./public/app/features/folders/state/navModel.ts","webpack:///./public/app/features/search/components/DashboardListPage.tsx","webpack:///./public/app/features/search/loaders.ts"],"names":["buildNavModel","folder","model","icon","id","subTitle","url","text","title","breadcrumbs","children","active","uid","canAdmin","push","canSave","getLoadingNav","tabIndex","main","canEdit","version","node","DashboardListPage","memo","navModel","useAsync","startsWith","backendSrv","getFolderByUid","then","folderNav","loadFolderPage","path","locationUtil","stripBaseFromUrl","location","pathname","getLocationSrv","update","pageNavModel","Promise","resolve","loading","value","Page","Contents","isLoading","ManageDashboards","displayName","connect","state","getNavModel","navIndex","getRouteParams","getUrl"],"mappings":"4FAGO,SAASA,EAAcC,GAC5B,IAAMC,EAAQ,CACZC,KAAM,SACNC,GAAI,gBACJC,SAAU,yCACVC,IAAK,GACLC,KAAMN,EAAOO,MACbC,YAAa,CAAC,CAAED,MAAO,aAAcF,IAAK,eAC1CI,SAAU,CACR,CACEC,QAAQ,EACRR,KAAM,OACNC,GAAI,qBAAF,OAAuBH,EAAOW,KAChCL,KAAM,aACND,IAAKL,EAAOK,OAyBlB,OApBIL,EAAOY,UACTX,EAAMQ,SAASI,KAAK,CAClBH,QAAQ,EACRR,KAAM,OACNC,GAAI,sBAAF,OAAwBH,EAAOW,KACjCL,KAAM,cACND,IAAK,GAAF,OAAKL,EAAOK,IAAZ,kBAIHL,EAAOc,SACTb,EAAMQ,SAASI,KAAK,CAClBH,QAAQ,EACRR,KAAM,MACNC,GAAI,mBAAF,OAAqBH,EAAOW,KAC9BL,KAAM,WACND,IAAK,GAAF,OAAKL,EAAOK,IAAZ,eAIAJ,EAGF,SAASc,EAAcC,GAC5B,IAAMC,EAAOlB,EAAc,CACzBI,GAAI,EACJQ,IAAK,UACLJ,MAAO,UACPF,IAAK,MACLS,SAAS,EACTI,SAAS,EACTN,UAAU,EACVO,QAAS,IAKX,OAFAF,EAAKR,SAAUO,GAAUN,QAAS,EAE3B,CACLO,KAAMA,EACNG,KAAMH,EAAKR,SAAUO,IA1DzB,qE,m6BCeO,IAAMK,EAA+BC,gBAAK,YAA4B,MAAzBC,EAAyB,EAAzBA,SAAUZ,EAAe,EAAfA,IAAKN,EAAU,EAAVA,IAAU,EAChDmB,aAAyD,WAClF,OAAKb,GAAQN,EAAIoB,WAAW,eCjBF,SAACd,GAC7B,OAAOe,IAAWC,eAAehB,GAAKiB,MAAK,SAAC5B,GAC1C,IAAMuB,EAAWxB,YAAcC,GAG/B,OAFAuB,EAASd,SAAU,GAAGC,QAAS,EAExB,CAAEV,SAAQ6B,UAAWN,MDgBrBO,CAAenB,GAAMiB,MAAK,YAA2B,IAAxB5B,EAAwB,EAAxBA,OAAQ6B,EAAgB,EAAhBA,UACpCE,EAAOC,eAAaC,iBAAiBjC,EAAOK,KAMlD,OAJI0B,IAASG,SAASC,UACpBC,2BAAiBC,OAAO,CAAEN,SAGrB,CAAE/B,SAAQsC,aAAc,EAAF,GAAOf,EAAP,CAAiBN,KAAMY,QAV7CU,QAAQC,QAAQ,CAAEF,aAAcf,MAYxC,CAACZ,IAdI8B,EADmE,EACnEA,QAASC,EAD0D,EAC1DA,MAgBjB,OACE,kBAACC,EAAA,EAAD,CAAMpB,SAAQ,UAAEmB,aAAF,EAAEA,EAAOJ,oBAAT,QAAyBf,GACrC,kBAACoB,EAAA,EAAKC,SAAN,CAAeC,UAAWJ,GACxB,kBAACK,EAAA,EAAD,CAAkB9C,OAAQ0C,aAAF,EAAEA,EAAO1C,cAMzCqB,EAAkB0B,YAAc,oBAUjBC,6BARiD,SAACC,GAC/D,MAAO,CACL1B,SAAU2B,YAAYD,EAAME,SAAU,qBACtCxC,IAAKyC,YAAeH,EAAMf,UAAUvB,IACpCN,IAAKgD,YAAOJ,EAAMf,aAIPc,CAAyB3B","file":"DashboardListPage.1c3a1c85d09a392be724.js","sourcesContent":["import { FolderDTO } from 'app/types';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  const model = {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards & permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n    ],\n  };\n\n  if (folder.canAdmin) {\n    model.children.push({\n      active: false,\n      icon: 'lock',\n      id: `folder-permissions-${folder.uid}`,\n      text: 'Permissions',\n      url: `${folder.url}/permissions`,\n    });\n  }\n\n  if (folder.canSave) {\n    model.children.push({\n      active: false,\n      icon: 'cog',\n      id: `folder-settings-${folder.uid}`,\n      text: 'Settings',\n      url: `${folder.url}/settings`,\n    });\n  }\n\n  return model;\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: true,\n    canEdit: true,\n    canAdmin: true,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n","import React, { FC, memo } from 'react';\nimport { useAsync } from 'react-use';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { getLocationSrv } from '@grafana/runtime';\nimport { FolderDTO, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParams, getUrl } from 'app/core/selectors/location';\nimport Page from 'app/core/components/Page/Page';\nimport { loadFolderPage } from '../loaders';\nimport ManageDashboards from './ManageDashboards';\n\ninterface Props {\n  navModel: NavModel;\n  uid?: string;\n  url: string;\n}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, uid, url }) => {\n  const { loading, value } = useAsync<{ folder?: FolderDTO; pageNavModel: NavModel }>(() => {\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        getLocationSrv().update({ path });\n      }\n\n      return { folder, pageNavModel: { ...navModel, main: folderNav } };\n    });\n  }, [uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel ?? navModel}>\n      <Page.Contents isLoading={loading}>\n        <ManageDashboards folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nconst mapStateToProps: MapStateToProps<Props, {}, StoreState> = (state) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n    uid: getRouteParams(state.location).uid as string | undefined,\n    url: getUrl(state.location),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n","import { backendSrv } from 'app/core/services/backend_srv';\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n"],"sourceRoot":""}